{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\fswiss\fcharset0 ArialMT;\f2\fnil\fcharset0 Monaco;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red65\green65\blue65;
\red24\green24\blue24;\red244\green249\blue255;\red82\green90\blue101;\red60\green60\blue59;\red197\green209\blue219;
\red33\green91\blue198;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0\c87059;\cssrgb\c100000\c100000\c100000;\cssrgb\c32157\c32157\c32157;
\cssrgb\c12157\c12157\c12157;\cssrgb\c96471\c98039\c100000;\cssrgb\c39608\c42745\c47059;\cssrgb\c30196\c30196\c29804;\cssrgb\c81176\c85490\c88627;
\cssrgb\c16078\c44706\c81961;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\partightenfactor0
\ls1\ilvl0
\f0\b\fs40 \cf2 \cb3 {\listtext	1.	}{\field{\*\fldinst{HYPERLINK "https://www.coursera.org/learn/r-programming/peer/tNy8H/programming-assignment-2-lexical-scoping"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Instructions}}{\field{\*\fldinst{HYPERLINK "https://www.coursera.org/learn/r-programming/peer/tNy8H/programming-assignment-2-lexical-scoping/submit"}}{\fldrslt \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 My submission\
}}\pard\tx220\tx720\pardeftab720\li720\fi-720\sl480\sa300\partightenfactor0
\ls1\ilvl0\cf4 {\listtext	2.	}{\field{\*\fldinst{HYPERLINK "https://www.coursera.org/learn/r-programming/peer/tNy8H/programming-assignment-2-lexical-scoping/discussions"}}{\fldrslt \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 Discussions}}
\f1\b0\fs28 \cf5 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\pardeftab720\sl420\partightenfactor0
\cf5 \cb3 second programming assignment will require you to write an R function is able to cache potentially time-consuming computations. For example, taking the mean of a numeric vector is typically a fast operation. However, for a very long vector, it may take too long to compute the mean, especially if it has to be computed repeatedly (e.g. in a loop). If the contents of a vector are not changing, it may make sense to cache the value of the mean so that when we need it again, it can be looked up in the cache rather than recomputed. In this Programming Assignment will take advantage of the scoping rules of the R language and how they can be manipulated to preserve state inside of an R object.\
\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f0\b \cf5 \cb6 Review criteria\cf7 \strokec7 \'a0\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f1\b0 \cf5 \cb3 \strokec5 This assignment will be graded via peer assessment. During the evaluation phase, you must evaluate and grade the submissions of at least 4 of your classmates. If you do not complete at least 4 evaluations, your own assignment grade will be reduced by 20%.\
\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f0\b \cf5 \cb6 Example: Caching the Mean of a Vector\cf7 \cb1 \strokec7 \
\pard\pardeftab720\sl420\sa400\partightenfactor0

\f1\b0 \cf5 \cb3 \strokec5 In this example we introduce the <<- operator which can be used to assign a value to an object in an environment that is different from the current environment. Below are two functions that are used to create a special object that stores a numeric vector and cache's its mean.\cb1 \
\cb3 The first function, makeVector creates a special "vector", which is really a list containing a function to\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa200\partightenfactor0
\ls2\ilvl0\cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 set the value of the vector\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 get the value of the vector\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 set the value of the mean\cb1 \
\ls2\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 get the value of the mean\cb1 \
\pard\pardeftab720\sl320\partightenfactor0

\f2\fs24 \cf8 \cb9 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0
\cf8 \cb1 \
\pard\pardeftab720\sl320\partightenfactor0
\cf8 \cb3 makeVector <- function(x = numeric()) \{\cb1 \
\cb3         m <- NULL\cb1 \
\cb3         set <- function(y) \{\cb1 \
\cb3                 x <<- y\cb1 \
\cb3                 m <<- NULL\cb1 \
\cb3         \}\cb1 \
\cb3         get <- function() x\cb1 \
\cb3         setmean <- function(mean) m <<- mean\cb1 \
\cb3         getmean <- function() m\cb1 \
\cb3         list(set = set, get = get,\cb1 \
\cb3              setmean = setmean,\cb1 \
\cb3              getmean = getmean)\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl420\sa400\partightenfactor0

\f1\fs28 \cf5 \cb3 \strokec5 The following function calculates the mean of the special "vector" created with the above function. However, it first checks to see if the mean has already been calculated. If so, it gets the mean from the cache and skips the computation. Otherwise, it calculates the mean of the data and sets the value of the mean in the cache via the setmean function.
\f2\fs24 \cf8 \cb1 \strokec8 \
\pard\pardeftab720\sl320\partightenfactor0
\cf8 \cb3 cachemean <- function(x, ...) \{\cb1 \
\cb3         m <- x$getmean()\cb1 \
\cb3         if(!is.null(m)) \{\cb1 \
\cb3                 message("getting cached data")\cb1 \
\cb3                 return(m)\cb1 \
\cb3         \}\cb1 \
\cb3         data <- x$get()\cb1 \
\cb3         m <- mean(data, ...)\cb1 \
\cb3         x$setmean(m)\cb1 \
\cb3         m\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs28 \cf5 \cb6 \strokec5 Assignment: Caching the Inverse of a Matrix\cf7 \cb1 \strokec7 \
\pard\pardeftab720\sl420\sa400\partightenfactor0

\f1\b0 \cf5 \cb3 \strokec5 Matrix inversion is usually a costly computation and there may be some benefit to caching the inverse of a matrix rather than compute it repeatedly (there are also alternatives to matrix inversion that we will not discuss here). Your assignment is to write a pair of functions that cache the inverse of a matrix.\cb1 \
\cb3 Write the following functions:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa200\partightenfactor0
\ls3\ilvl0\cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse.\cb1 \
\ls3\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.\cb1 \
\pard\pardeftab720\sl420\sa400\partightenfactor0
\cf5 \cb3 Computing the inverse of a square matrix can be done with the solve function in R. For example, if X is a square invertible matrix, then solve(X) returns its inverse.\cb1 \
\cb3 For this assignment, assume that the matrix supplied is always invertible.\cb1 \
\cb3 In order to complete this assignment, you must do the following:\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa200\partightenfactor0
\ls4\ilvl0\cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Fork the GitHub repository containing the stub R files at\'a0{\field{\*\fldinst{HYPERLINK "https://github.com/rdpeng/ProgrammingAssignment2"}}{\fldrslt \cf10 \ul \ulc10 \strokec10 https://github.com/rdpeng/ProgrammingAssignment2}}\'a0to create a copy under your own account.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Clone your forked GitHub repository to your computer so that you can edit the files locally on your own machine.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Edit the R file contained in the git repository and place your solution in that file (please do not rename the file).\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	4.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Commit your completed R file into YOUR git repository and push your git branch to the GitHub repository under your account.\cb1 \
\ls4\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	5.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Submit to Coursera the URL to your GitHub repository that contains the completed R code for the assignment.\cb1 \
\pard\pardeftab720\sl420\sa400\partightenfactor0
\cf5 \cb3 In addition to submitting the URL for your GitHub repository, you will need to submit the\'a0
\f0\b 40 character SHA-1 hash
\f1\b0 \'a0(as string of numbers from 0-9 and letters from a-f) that identifies the repository commit that contains the version of the files you want to submit. You can do this in GitHub by doing the following\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\sa200\partightenfactor0
\ls5\ilvl0\cf5 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	1.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Going to your GitHub repository web page for this assignment\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	2.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 Click on the \'93?? commits\'94 link where ?? is the number of commits you have in the repository. For example, if you made a total of 10 commits to this repository, the link should say \'9310 commits\'94.\cb1 \
\ls5\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	3.	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 You will see a list of commits that you have made to this repository. The most recent commit is at the very top. If this represents the version of the files you want to submit, then just click the \'93copy to clipboard\'94 button on the right hand side that should appear when you hover over the SHA-1 hash. Paste this SHA-1 hash into the course web site when you submit your assignment. If you don't want to use the most recent commit, then go down and find the commit you want and copy the SHA-1 hash.\cb1 \
\pard\pardeftab720\sl420\sa400\partightenfactor0
\cf5 \cb3 A valid submission will look something like (this is just an\'a0
\f0\b example
\f1\b0 !)
\f2\fs24 \cf8 \cb9 \strokec8 \
\cb3 https://github.com/rdpeng/ProgrammingAssignment2\cb1 \
\pard\pardeftab720\sl420\partightenfactor0

\f0\b\fs28 \cf5 \cb6 \strokec5 Grading\cf7 \cb1 \strokec7 \
\pard\pardeftab720\sl420\partightenfactor0

\f1\b0 \cf5 \cb3 \strokec5 This assignment will be graded via peer assessment. During the evaluation phase, you must evaluate and grade the submissions of at least 4 of your classmates. If you do not complete at least 4 evaluations, your own assignment grade will be reduced by 20%.\cb1 \
}